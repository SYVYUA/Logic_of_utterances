<resources>
    <string name="app_name">DiplomaMaster</string>
    <string name="name_prepod">Chernenko Oksana</string>
    <string name="status_prepod">Associate professor, candidate of physical and mathematical sciences</string>
    <string name="my_name">Syvokin Oleksandr</string>
    <string name="my_status">Master</string>
    <string name="firstLesson">Test tasks</string>
    <string name="secondLesson">Practice tasks</string>
    <string name="thirdLesson">Practice exercises with explain</string>
    <string name="check">Verify</string>
    <string name="nametest1">Which of the sentences is a statement?</string>
    <string name="test1">1. It rain on street. "\n" 2.Teacher did not come to the lesson. "\n" 3. When will Sergey come? "\n" 4. Read carefully! </string>
    <string name="ch_1">1</string>
    <string name="ch_2">2</string>
    <string name="ch_3">3</string>
    <string name="ch_4">4</string>
    <string name="logic_operation">Logical operations</string>
    <string name="logicAND">Logical and -</string>
    <string name="logicOR">Logical or -</string>
    <string name="logicIF">if,..then -</string>
    <string name="task2">Drag the characters to their values</string>
    <string name="task3">Specify the formula of the law of contradiction</string>
    <string name="task3var">1) p ∧ ¬p = F "\n" 2) p ∨ ¬p = F "\n" 3) p ∨ q = q ∨ p "\n" 4)p ∧ p = p</string>
    <string name="task4">p → q = ¬p ∨ q це</string>
    <string name="task4var">1) The rule of equivalence "\n" 2) The rule of implication "\n" 3) The rule of commutativity "\n" 4) There is no correct answer</string>
    <string name="task5">p ~ q = (p → q) ∧ (q → p) it</string>
    <string name="task5var">1) The rule of implication "\n" 2) The rule of commutativity "\n" 3) The rule of equivalence "\n" 4) The law of contradiction</string>
    <string name="task6">The result of using the law of distribution is the following formula...</string>
    <string name="task6var">1) (¬q ∨ (¬p ∧ q) ~ r "\n" 2) (q ∨ (¬p ∧ p) ~ q "\n" 3) (q ∨ (¬p ∧ p) → q "\n" 4) (p ∧ (¬p ∨ p) → q</string>
    <string name="task7">«If the wet is high and the temperature is high, then we do not feel good "is represented by a complex statement. Where is it?</string>
    <string name="task7var">1) ((p ∧ q) → (¬r)) "\n" 2) p → q ∧ ¬q "\n" 3) p ∧ q → ¬r "\n" 4) (p ∧ r → ¬q</string>
    <string name="task8">Atom in the logic of utterances is -</string>
    <string name="task8var">1) the smallest part of the expression "\n" 2) element of the equation "\n" 3) formula "\n" 4) There is no correct answer</string>
    <string name="task9">Apply the rule of implication to the formula p→q:</string>
    <string name="task9var">1) ¬p ∨ q "\n" 2) ¬p ∧ q "\n" 3) p ∨ ¬q "\n" 4) p ∧ q</string>
    <string name="task10">Formulate the title of the rule:"\n" ¬(¬p) = p</string>
    <string name="task10var">1) the rule of double denial "\n" 2) the rule eliminating the implication "\n" 3) the rule of equivalence "\n" 4) the rule of double equality</string>
    <string name="pract1">Prove the equivalence of the formula:</string>
    <string name="taskforPract">p → (q ∧ r) і (p → q) ∧ (p → r)</string>
    <string name="subtask1">Write the sequence of conversions and select the name of the used law or rule</string>
    <string name="varBr">(</string>
    <string name="varBrB">)</string>
    <string name="varBr2">(¬p ∨</string>
    <string name="varPBr">(p </string>
    <string name="varP">p</string>
    <string name="varR">r</string>
    <string name="varEqua">~</string>
    <string name="varQ">q</string>
    <string name="varNotNotq">¬(¬q)</string>
    <string name="varNotQ">¬q</string>
    <string name="varNotP">¬p</string>
    <string name="arrowLeft">→</string>
    <string name="oR">∨</string>
    <string name="equaL">=</string>
    <string name="anD">∧</string>
    <string name="qANDr">(q ∧ r) =</string>
    <string name="orQ">∨ (q</string>
    <string name="rBracket">r)</string>
    <string name="ch1P">By the rule of elimination of the implication</string>
    <string name="ch2P">By the law of distributivity</string>
    <string name="ch2P2">By the law of distributivity 3a</string>
    <string name="ch3P">By the rule of commutativity</string>
    <string name="secch3P">By the law of commutativity 1а</string>
    <string name="secCh2P">By the law of double denial 6</string>
    <string name="ch1P3">By the rule of implantation input</string>
    <string name="taskforPract2">p → (q ∧ r) = ¬p ∨ (q ∧ r)</string>
    <string name="answQwestion">Show answer options</string>
    <string name="taskforPract3">(¬p ∨ q) ∧ (¬p ∨ r )</string>
    <string name="explainForSecPr1">p → q та ¬q → ¬p</string>
    <string name="explainForSecPr2">p → q = ¬p ∨ q</string>
    <string name="explainForSecPr3">q ∨ ¬p</string>
    <string name="explainForSecPr4">¬(¬q) ∨ ¬p</string>


    <!--Для вспливаючих вікон-->
    <string name="promt_1">False! Expressions can only be narrative sentences.</string>
    <string name="promt_2">False! Make the right match.</string>
    <string name="promt_3">False! This law can not be ∨, and there must be a logical objection.</string>
    <string name="promt_4">False! This is the rule of implication!</string>
    <string name="promt_5">False! Look at the sign ~.</string>
    <string name="promt_6">False! Correct answer 2.</string>
    <string name="promt_7">False! The first part of the statement should be in bracket!</string>
    <string name="promt_8">False! This is not an element and not a part.</string>
    <string name="promt_9">False! → changes to ∨.</string>
    <string name="promt_10">False! Look at the first two characters!</string>
    <!--Для вибору задач-->
    <string name="practProblem2">Practical tasks with explain</string>
    <string name="practProblem">Practical tasks</string>
    <string name="choiseProblem">Select task number</string>
    <string name="problem_1">Problem №1</string>
    <string name="problem_2">Problem №2</string>
    <string name="problem_3">Theorems</string>
    <!--Для переходу до нових завдань і меню-->
    <string name="not_choise">You have not chosen anything.</string>
    <string name="return_to_menu">Return to the main menu.</string>
    <string name="what_do">What will do next?</string>
    <string name="title_test">Bravo. You have solved the tests!</string>
    <string name="title_problem">Bravo. You have solved the problem!</string>

    <!--Задачі з поясненням-->
    <string name="firstHeader">Let consider the following formulas F1 = (P → Q), "\n" F2 = ¬Q, G = ¬P</string>
    <string name="firstTaskForExp">Prove that G is a logical consequence of the formulas F1 and F2</string>
    <string name="solutionBut">Solution</string>
    <string name="solExp1">Method 1: Use the truth tables to show that formula G is executed in each interpolation, in which the formula holds. "\n" (P → Q) ∧ !Q</string>
    <string name="bigP">P</string>
    <string name="bigPexp">- prices is growing;</string>
    <string name="bigQ">Q</string>
    <string name="bigSexp">- life level is downing;</string>
    <string name="notQ">¬Q</string>
    <string name="bigRexp">- people do not satisfied.</string>
    <string name="next">Next</string>
    <string name="solExp11">We need to explain logical follow up:</string>
    <string name="p_q">P → Q</string>
    <string name="p_q_notQ">(P → Q) ∧ ¬Q</string>
    <string name="notP">¬P</string>
    <string name="firstStep">Method 1</string>
    <string name="expl1">Let is verify that the formula "\n" (P → S) ∨ (S → R) ∨ P → R is a tautology.</string>
    <string name="expl1_1">To do this, it is enough to build a truth table.</string>
    <string name="p_s_s_r">(P → S) ∨ (S → R)</string>
    <string name="all_p_s_r">(P → S) ∨ (S → R) ∨ (P → R)</string>
    <string name="p_s1">P → S</string>
    <string name="s_r1">S → R</string>
    <string name="p_r1">P → R</string>
    <string name="bigt">T</string>
    <string name="bigf">F</string>
    <string name="explainForTable">From the table it is seen that there is only one interpretation, in which (P → Q) ∧ ¬Q is performed, namely, P = F, Q = F; In this interpretation, the formula ¬P is also executed. Consequently, by the definition of the formula ¬Р - the logical consequence of the formulas P → Q and ¬Q</string>
    <string name="method2">We use Theorem 1. We prove that the formula (F1 ∧ F2) → G is of general significance. To do this, we construct a table for the formula (F1 ∧ F2) → G = ((P → Q) ∧ ¬Q) → ¬P.</string>
    <string name="method2exp">Method 2.</string>
    <string name="forTable2">((P → Q) ∧ ¬Q) → ¬P</string>
    <string name="expForTable2">Since the formula ((P → Q) ∧ ¬Q) → ¬P is of general significance, the formula ¬Р - is the logical consequences of the formulas P → Q and ¬Q.</string>
    <string name="forTable3">((P → Q) ∧ ¬Q) ∧ P</string>
    <string name="method3exp">Method 3</string>
    <string name="method3">We use Theorem 2 and prove that formula (F1 ∧ F2) → ¬G = ((P → Q) ∧ ¬Q) ∧ ¬(¬P) = ((P → Q) ∧ ¬Q) ∧ P)) is denied. Let build the table of truth for this formula. Create a truth table for this formula. From the table it is clear that the formula (P → Q) ∧ ¬Q → ¬P is false in any interpretation.</string>
    <string name="expForTable3">Now, according to the theorem, we can conclude that the formula ¬Р logical follows from the formulas P → Q and ¬Q.</string>
    <string name="finish">To the main menu</string>

    <!--link for the symbol-->
    <string name="list_of_logic_symbol">List of logic symbol: http://catcut.net/VwrB</string>

    <!--Теорема∧ ∨ c-->
    <string name="theorem_1">Theorem 1</string>
    <string name="explain_theorem_1">Formula G is the logical consequences of the formulas F1, F2,…,Fn then and only then the formula ((F1 ∧ F2 ∧...∧Fn) → G) - general significance. \n\n <b>Proof of the theorem.</b> \n\n <b>Necessity.</b> Let G the logical consequence of the formulas F1, F2,…,Fn and І - their arbitrary interpretation. If the formulas F1, F2,...,Fn are true in the interpretation of I, then according to the logical consequence formula G is also true in I. It follows from this that the formula ((F1 ∧ F2 ∧...∧Fn) → G) is true in the interpretation of I. On the other hand, if not all formulas from F1, F2,...,Fn are true in I interpolation, that is, at least one of them is false in I, then the formula ((F1 ∧ F2 ∧...∧Fn) → G) is true in І. Thus, the formula ((F1 ∧ F2 ∧...∧Fn) → G) is true in arbitrary interpretation, or ⊨ ((F1 ∧ F2 ∧...∧Fn) → G). \n\n <b>Sufficiency.</b> Assume that the formula ((F1 ∧ F2 ∧...∧ Fn) → G)is of general significance. Then if formula (F1 ∧ F2 ∧...∧ Fn) is true in some interpretation, then formula G must be true in this interpretation, ie G is the logical consequences of the formulas F1, F2,...,Fn. If formula G is the logical consequences of the formulas F1, F2,...,Fn then the formula ((F1 ∧ F2 ∧...∧ Fn) → G) is called logical theorem, and G is the output formula. The expression F1, F2,...,Fn ⊢ G is called the output rule. Here hypotheses are written to the left of the sign ⊢, and the conclusion is to the right. The symbol ⊢ has the meaning "consequently".</string>


    <!--Теорема 2∧ ∨-->
    <string name="theorem_2">Theorem 2 (principles of direct deduction).</string>
    <string name="explain_theorem_2">Formula G is the logical consequence of the formulas F1, F2, ..., Fn if and only if the formula ((F1 ∧ F2 ∧...∧Fn) → G) is a contradiction. \n\n By the theorem 1 formula G is the logical consequence of the formulas F1, F2,...,Fn if and only if the formula ((F1 ∧ F2 ∧...∧Fn) → G) is the generally significant. Consequently, G is the logical consequence of the formulas F1, F2,...,Fn if and only if the denial of the formulas ((F1 ∧ F2 ∧...∧Fn) → G) is a contradiction. Indeed,</string>

    <!--move here-->
    <string name="move_here">Flip here →</string>
    <string name="move_here2">← Flip here</string>

    <!--пояснення чому true or false-->
    <string name="explainLogic">Explain</string>
    <string name="logicForAnd">Formula (P ∧ Q) is true, if P and Q are true at the same time. In all other cases, the formula (P ∧ Q) is false.</string>
    <string name="logicForNot">Formula (¬P) is true, when Р is false and false when Р is true.</string>
    <string name="logicForIfelse">Formula (P → Q) is false, if formula Р is true, and Q is false. In all other cases, the formula is true.</string>
</resources>